
SoC2.elf:     file format elf32-littlenios2
SoC2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001204 memsz 0x00001204 flags r-x
    LOAD off    0x00002224 vaddr 0x00011224 paddr 0x000114f8 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x000027cc vaddr 0x000117cc paddr 0x000117cc align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000011e0  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  00011200  00011200  00002200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  00011224  000114f8  00002224  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  000117cc  000117cc  000027cc  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  000024f8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000348  00000000  00000000  00002520  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000004a1  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00005680  00000000  00000000  00002d09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001386  00000000  00000000  00008389  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003f14  00000000  00000000  0000970f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000570  00000000  00000000  0000d624  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000008ef  00000000  00000000  0000db94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000007e5  00000000  00000000  0000e483  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0000ec68  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  0000ec78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0001005c  2**0
                  CONTENTS, READONLY
 17 .cpu          00000004  00000000  00000000  0001005f  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00010063  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00010064  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00010065  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00010069  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0001006d  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  00010071  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  00010075  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  00010079  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  0001007d  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000017  00000000  00000000  00010081  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00045681  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .text	00000000 .text
00011200 l    d  .rodata	00000000 .rodata
00011224 l    d  .rwdata	00000000 .rwdata
000117cc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 SoC2.c
00000000 l    df *ABS*	00000000 alt_load.c
00010134 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011224 l     O .rwdata	0000002c JTAG
00010270 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00010600 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0001067c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001075c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000107d8 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00010928 l     F .text	000000f8 alt_file_locked
00010bac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00010fa4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 impure.c
000113f8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001119c l     F .text	00000040 alt_sim_halt
000101a0 g     F .text	0000005c alt_main
000114f8 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000117d8 g     O .bss	00000004 errno
000117d0 g     O .bss	00000004 alt_argv
000194d8 g       *ABS*	00000000 _gp
00011278 g     O .rwdata	00000180 alt_fd_list
00010ca4 g     F .text	00000094 alt_find_dev
000108b0 g     F .text	00000078 alt_io_redirect
00010358 g     F .text	00000104 altera_avalon_jtag_uart_read
000114e8 g     O .rwdata	00000004 alt_max_fd
000114f4 g     O .rwdata	00000004 _global_impure_ptr
000117dc g       *ABS*	00000000 __bss_end
00011250 g     O .rwdata	00000028 alt_dev_null
00010660 g     F .text	0000001c alt_dcache_flush_all
000114f8 g       *ABS*	00000000 __ram_rwdata_end
000114e0 g     O .rwdata	00000008 alt_dev_list
00011224 g       *ABS*	00000000 __ram_rodata_end
000117dc g       *ABS*	00000000 end
0001a000 g       *ABS*	00000000 __alt_stack_pointer
0001045c g     F .text	000000a4 altera_avalon_jtag_uart_write
00010fa8 g     F .text	000001bc __call_exitprocs
00010020 g     F .text	0000003c _start
00010230 g     F .text	00000040 alt_sys_init
00011164 g     F .text	00000038 __mulsi3
00011224 g       *ABS*	00000000 __ram_rwdata_start
00011200 g       *ABS*	00000000 __ram_rodata_start
000102a8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00010e58 g     F .text	000000d0 alt_get_fd
00010f48 g     F .text	0000003c memcmp
000117dc g       *ABS*	00000000 __alt_stack_base
00010d38 g     F .text	00000120 alt_find_file
000106a8 g     F .text	000000b4 alt_dev_llist_insert
000117cc g       *ABS*	00000000 __bss_start
0001005c g     F .text	00000058 main
00010000 g       *ABS*	00000000 __alt_mem_RAM
000117d4 g     O .bss	00000004 alt_envp
00010300 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000114ec g     O .rwdata	00000004 alt_errno
00011200 g       *ABS*	00000000 __flash_rodata_start
000101fc g     F .text	00000034 alt_irq_init
00010c0c g     F .text	00000078 alt_release_fd
000114f0 g     O .rwdata	00000004 _impure_ptr
000117cc g     O .bss	00000004 alt_argc
000114d8 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000114f8 g       *ABS*	00000000 _edata
000117dc g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010c84 g     F .text	00000020 altera_nios2_qsys_irq_init
00010f28 g     F .text	00000020 exit
0001a000 g       *ABS*	00000000 __alt_data_end
000111dc g     F .text	00000020 _exit
00010f84 g     F .text	00000020 strlen
00010a20 g     F .text	0000018c open
000107bc g     F .text	0000001c alt_icache_flush_all
00010500 g     F .text	00000100 close
000100b4 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00010020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee80014 	ori	sp,sp,40960

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a53614 	ori	gp,gp,38104
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1085f314 	ori	r2,r2,6092

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c5f714 	ori	r3,r3,6108

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00100b40 	call	100b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00101a00 	call	101a0 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <alt_after_alt_main>

0001005c <main>:

#include <stdio.h>
#include "system.h"
#include "io.h"

int main() {
   1005c:	deffff04 	addi	sp,sp,-4
   10060:	df000015 	stw	fp,0(sp)
   10064:	d839883a 	mov	fp,sp
   10068:	00000006 	br	1006c <main+0x10>
    // Main communication loop for SoC2
    while (1) {
        // Wait for req signal from SoC1
        while (IORD(RECEIVE_REQ_BASE, 0) == 0);
   1006c:	008000b4 	movhi	r2,2
   10070:	10841c04 	addi	r2,r2,4208
   10074:	10800037 	ldwio	r2,0(r2)
   10078:	1005003a 	cmpeq	r2,r2,zero
   1007c:	103ffb1e 	bne	r2,zero,1006c <main+0x10>

        // Do something when req is received

        // Send ack signal to SoC1
        IOWR(ACK_BASE, 0, 1);
   10080:	00c000b4 	movhi	r3,2
   10084:	18c41004 	addi	r3,r3,4160
   10088:	00800044 	movi	r2,1
   1008c:	18800035 	stwio	r2,0(r3)

        // Wait for SoC1 to clear req
        while (IORD(RECEIVE_REQ_BASE, 0) == 1);
   10090:	008000b4 	movhi	r2,2
   10094:	10841c04 	addi	r2,r2,4208
   10098:	10800037 	ldwio	r2,0(r2)
   1009c:	10800060 	cmpeqi	r2,r2,1
   100a0:	103ffb1e 	bne	r2,zero,10090 <main+0x34>

        // Clear ack signal
        IOWR(ACK_BASE, 0, 0);
   100a4:	008000b4 	movhi	r2,2
   100a8:	10841004 	addi	r2,r2,4160
   100ac:	10000035 	stwio	zero,0(r2)
    }
   100b0:	003fee06 	br	1006c <main+0x10>

000100b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   100b4:	defffe04 	addi	sp,sp,-8
   100b8:	dfc00115 	stw	ra,4(sp)
   100bc:	df000015 	stw	fp,0(sp)
   100c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   100c4:	01000074 	movhi	r4,1
   100c8:	21053e04 	addi	r4,r4,5368
   100cc:	01400074 	movhi	r5,1
   100d0:	29448904 	addi	r5,r5,4644
   100d4:	01800074 	movhi	r6,1
   100d8:	31853e04 	addi	r6,r6,5368
   100dc:	00101340 	call	10134 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   100e0:	01000074 	movhi	r4,1
   100e4:	21000804 	addi	r4,r4,32
   100e8:	01400074 	movhi	r5,1
   100ec:	29400804 	addi	r5,r5,32
   100f0:	01800074 	movhi	r6,1
   100f4:	31800804 	addi	r6,r6,32
   100f8:	00101340 	call	10134 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   100fc:	01000074 	movhi	r4,1
   10100:	21048004 	addi	r4,r4,4608
   10104:	01400074 	movhi	r5,1
   10108:	29448004 	addi	r5,r5,4608
   1010c:	01800074 	movhi	r6,1
   10110:	31848904 	addi	r6,r6,4644
   10114:	00101340 	call	10134 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10118:	00106600 	call	10660 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1011c:	00107bc0 	call	107bc <alt_icache_flush_all>
}
   10120:	e037883a 	mov	sp,fp
   10124:	dfc00117 	ldw	ra,4(sp)
   10128:	df000017 	ldw	fp,0(sp)
   1012c:	dec00204 	addi	sp,sp,8
   10130:	f800283a 	ret

00010134 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10134:	defffc04 	addi	sp,sp,-16
   10138:	df000315 	stw	fp,12(sp)
   1013c:	df000304 	addi	fp,sp,12
   10140:	e13ffd15 	stw	r4,-12(fp)
   10144:	e17ffe15 	stw	r5,-8(fp)
   10148:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1014c:	e0fffe17 	ldw	r3,-8(fp)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	18800e26 	beq	r3,r2,10190 <alt_load_section+0x5c>
  {
    while( to != end )
   10158:	00000a06 	br	10184 <alt_load_section+0x50>
    {
      *to++ = *from++;
   1015c:	e0bffd17 	ldw	r2,-12(fp)
   10160:	10c00017 	ldw	r3,0(r2)
   10164:	e0bffe17 	ldw	r2,-8(fp)
   10168:	10c00015 	stw	r3,0(r2)
   1016c:	e0bffe17 	ldw	r2,-8(fp)
   10170:	10800104 	addi	r2,r2,4
   10174:	e0bffe15 	stw	r2,-8(fp)
   10178:	e0bffd17 	ldw	r2,-12(fp)
   1017c:	10800104 	addi	r2,r2,4
   10180:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10184:	e0fffe17 	ldw	r3,-8(fp)
   10188:	e0bfff17 	ldw	r2,-4(fp)
   1018c:	18bff31e 	bne	r3,r2,1015c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   10190:	e037883a 	mov	sp,fp
   10194:	df000017 	ldw	fp,0(sp)
   10198:	dec00104 	addi	sp,sp,4
   1019c:	f800283a 	ret

000101a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   101a0:	defffd04 	addi	sp,sp,-12
   101a4:	dfc00215 	stw	ra,8(sp)
   101a8:	df000115 	stw	fp,4(sp)
   101ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   101b0:	0009883a 	mov	r4,zero
   101b4:	00101fc0 	call	101fc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   101b8:	00102300 	call	10230 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   101bc:	01000074 	movhi	r4,1
   101c0:	21048004 	addi	r4,r4,4608
   101c4:	01400074 	movhi	r5,1
   101c8:	29448004 	addi	r5,r5,4608
   101cc:	01800074 	movhi	r6,1
   101d0:	31848004 	addi	r6,r6,4608
   101d4:	00108b00 	call	108b0 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   101d8:	d120bd17 	ldw	r4,-32012(gp)
   101dc:	d160be17 	ldw	r5,-32008(gp)
   101e0:	d1a0bf17 	ldw	r6,-32004(gp)
   101e4:	001005c0 	call	1005c <main>
   101e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   101ec:	01000044 	movi	r4,1
   101f0:	00105000 	call	10500 <close>
  exit (result);
   101f4:	e13fff17 	ldw	r4,-4(fp)
   101f8:	0010f280 	call	10f28 <exit>

000101fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   101fc:	defffd04 	addi	sp,sp,-12
   10200:	dfc00215 	stw	ra,8(sp)
   10204:	df000115 	stw	fp,4(sp)
   10208:	df000104 	addi	fp,sp,4
   1020c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS, NIOS);
   10210:	0010c840 	call	10c84 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10214:	00800044 	movi	r2,1
   10218:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

00010230 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10230:	defffe04 	addi	sp,sp,-8
   10234:	dfc00115 	stw	ra,4(sp)
   10238:	df000015 	stw	fp,0(sp)
   1023c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
   10240:	01000074 	movhi	r4,1
   10244:	21048904 	addi	r4,r4,4644
   10248:	00102700 	call	10270 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PCU, PCU);
   1024c:	00c000b4 	movhi	r3,2
   10250:	18c40004 	addi	r3,r3,4096
   10254:	00800044 	movi	r2,1
   10258:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SYSID);
}
   1025c:	e037883a 	mov	sp,fp
   10260:	dfc00117 	ldw	ra,4(sp)
   10264:	df000017 	ldw	fp,0(sp)
   10268:	dec00204 	addi	sp,sp,8
   1026c:	f800283a 	ret

00010270 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10270:	defffd04 	addi	sp,sp,-12
   10274:	dfc00215 	stw	ra,8(sp)
   10278:	df000115 	stw	fp,4(sp)
   1027c:	df000104 	addi	fp,sp,4
   10280:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10284:	e13fff17 	ldw	r4,-4(fp)
   10288:	01400074 	movhi	r5,1
   1028c:	29453804 	addi	r5,r5,5344
   10290:	00106a80 	call	106a8 <alt_dev_llist_insert>
}
   10294:	e037883a 	mov	sp,fp
   10298:	dfc00117 	ldw	ra,4(sp)
   1029c:	df000017 	ldw	fp,0(sp)
   102a0:	dec00204 	addi	sp,sp,8
   102a4:	f800283a 	ret

000102a8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   102a8:	defffa04 	addi	sp,sp,-24
   102ac:	dfc00515 	stw	ra,20(sp)
   102b0:	df000415 	stw	fp,16(sp)
   102b4:	df000404 	addi	fp,sp,16
   102b8:	e13ffd15 	stw	r4,-12(fp)
   102bc:	e17ffe15 	stw	r5,-8(fp)
   102c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   102c4:	e0bffd17 	ldw	r2,-12(fp)
   102c8:	10800017 	ldw	r2,0(r2)
   102cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   102d0:	e0bffc17 	ldw	r2,-16(fp)
   102d4:	11000a04 	addi	r4,r2,40
   102d8:	e0bffd17 	ldw	r2,-12(fp)
   102dc:	11c00217 	ldw	r7,8(r2)
   102e0:	e17ffe17 	ldw	r5,-8(fp)
   102e4:	e1bfff17 	ldw	r6,-4(fp)
   102e8:	00103580 	call	10358 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   102ec:	e037883a 	mov	sp,fp
   102f0:	dfc00117 	ldw	ra,4(sp)
   102f4:	df000017 	ldw	fp,0(sp)
   102f8:	dec00204 	addi	sp,sp,8
   102fc:	f800283a 	ret

00010300 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10300:	defffa04 	addi	sp,sp,-24
   10304:	dfc00515 	stw	ra,20(sp)
   10308:	df000415 	stw	fp,16(sp)
   1030c:	df000404 	addi	fp,sp,16
   10310:	e13ffd15 	stw	r4,-12(fp)
   10314:	e17ffe15 	stw	r5,-8(fp)
   10318:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1031c:	e0bffd17 	ldw	r2,-12(fp)
   10320:	10800017 	ldw	r2,0(r2)
   10324:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10328:	e0bffc17 	ldw	r2,-16(fp)
   1032c:	11000a04 	addi	r4,r2,40
   10330:	e0bffd17 	ldw	r2,-12(fp)
   10334:	11c00217 	ldw	r7,8(r2)
   10338:	e17ffe17 	ldw	r5,-8(fp)
   1033c:	e1bfff17 	ldw	r6,-4(fp)
   10340:	001045c0 	call	1045c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10344:	e037883a 	mov	sp,fp
   10348:	dfc00117 	ldw	ra,4(sp)
   1034c:	df000017 	ldw	fp,0(sp)
   10350:	dec00204 	addi	sp,sp,8
   10354:	f800283a 	ret

00010358 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   10358:	defff604 	addi	sp,sp,-40
   1035c:	df000915 	stw	fp,36(sp)
   10360:	df000904 	addi	fp,sp,36
   10364:	e13ffb15 	stw	r4,-20(fp)
   10368:	e17ffc15 	stw	r5,-16(fp)
   1036c:	e1bffd15 	stw	r6,-12(fp)
   10370:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   10374:	e0bffb17 	ldw	r2,-20(fp)
   10378:	10800017 	ldw	r2,0(r2)
   1037c:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   10380:	e0bffc17 	ldw	r2,-16(fp)
   10384:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   10388:	e0bffd17 	ldw	r2,-12(fp)
   1038c:	1007883a 	mov	r3,r2
   10390:	e0bffc17 	ldw	r2,-16(fp)
   10394:	10c5883a 	add	r2,r2,r3
   10398:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   1039c:	00001606 	br	103f8 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   103a0:	e0bffa17 	ldw	r2,-24(fp)
   103a4:	10800037 	ldwio	r2,0(r2)
   103a8:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   103ac:	e0bff717 	ldw	r2,-36(fp)
   103b0:	10a0000c 	andi	r2,r2,32768
   103b4:	1005003a 	cmpeq	r2,r2,zero
   103b8:	1000081e 	bne	r2,zero,103dc <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   103bc:	e0bff717 	ldw	r2,-36(fp)
   103c0:	1007883a 	mov	r3,r2
   103c4:	e0bff917 	ldw	r2,-28(fp)
   103c8:	10c00005 	stb	r3,0(r2)
   103cc:	e0bff917 	ldw	r2,-28(fp)
   103d0:	10800044 	addi	r2,r2,1
   103d4:	e0bff915 	stw	r2,-28(fp)
   103d8:	00000706 	br	103f8 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   103dc:	e0fff917 	ldw	r3,-28(fp)
   103e0:	e0bffc17 	ldw	r2,-16(fp)
   103e4:	1880071e 	bne	r3,r2,10404 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   103e8:	e0bffe17 	ldw	r2,-8(fp)
   103ec:	1090000c 	andi	r2,r2,16384
   103f0:	1004c03a 	cmpne	r2,r2,zero
   103f4:	1000031e 	bne	r2,zero,10404 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   103f8:	e0fff917 	ldw	r3,-28(fp)
   103fc:	e0bff817 	ldw	r2,-32(fp)
   10400:	18bfe736 	bltu	r3,r2,103a0 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   10404:	e0fff917 	ldw	r3,-28(fp)
   10408:	e0bffc17 	ldw	r2,-16(fp)
   1040c:	18800526 	beq	r3,r2,10424 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   10410:	e0fff917 	ldw	r3,-28(fp)
   10414:	e0bffc17 	ldw	r2,-16(fp)
   10418:	1887c83a 	sub	r3,r3,r2
   1041c:	e0ffff15 	stw	r3,-4(fp)
   10420:	00000906 	br	10448 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   10424:	e0bffe17 	ldw	r2,-8(fp)
   10428:	1090000c 	andi	r2,r2,16384
   1042c:	1005003a 	cmpeq	r2,r2,zero
   10430:	1000031e 	bne	r2,zero,10440 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   10434:	00bffd44 	movi	r2,-11
   10438:	e0bfff15 	stw	r2,-4(fp)
   1043c:	00000206 	br	10448 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   10440:	00bffec4 	movi	r2,-5
   10444:	e0bfff15 	stw	r2,-4(fp)
   10448:	e0bfff17 	ldw	r2,-4(fp)
}
   1044c:	e037883a 	mov	sp,fp
   10450:	df000017 	ldw	fp,0(sp)
   10454:	dec00104 	addi	sp,sp,4
   10458:	f800283a 	ret

0001045c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1045c:	defff904 	addi	sp,sp,-28
   10460:	df000615 	stw	fp,24(sp)
   10464:	df000604 	addi	fp,sp,24
   10468:	e13ffc15 	stw	r4,-16(fp)
   1046c:	e17ffd15 	stw	r5,-12(fp)
   10470:	e1bffe15 	stw	r6,-8(fp)
   10474:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   10478:	e0bffc17 	ldw	r2,-16(fp)
   1047c:	10800017 	ldw	r2,0(r2)
   10480:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   10484:	e0bffe17 	ldw	r2,-8(fp)
   10488:	1007883a 	mov	r3,r2
   1048c:	e0bffd17 	ldw	r2,-12(fp)
   10490:	10c5883a 	add	r2,r2,r3
   10494:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   10498:	00001106 	br	104e0 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1049c:	e0bffb17 	ldw	r2,-20(fp)
   104a0:	10800104 	addi	r2,r2,4
   104a4:	10800037 	ldwio	r2,0(r2)
   104a8:	10bfffec 	andhi	r2,r2,65535
   104ac:	1005003a 	cmpeq	r2,r2,zero
   104b0:	10000b1e 	bne	r2,zero,104e0 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   104b4:	e13ffb17 	ldw	r4,-20(fp)
   104b8:	e0bffd17 	ldw	r2,-12(fp)
   104bc:	10800003 	ldbu	r2,0(r2)
   104c0:	10c03fcc 	andi	r3,r2,255
   104c4:	18c0201c 	xori	r3,r3,128
   104c8:	18ffe004 	addi	r3,r3,-128
   104cc:	e0bffd17 	ldw	r2,-12(fp)
   104d0:	10800044 	addi	r2,r2,1
   104d4:	e0bffd15 	stw	r2,-12(fp)
   104d8:	2005883a 	mov	r2,r4
   104dc:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   104e0:	e0fffd17 	ldw	r3,-12(fp)
   104e4:	e0bffa17 	ldw	r2,-24(fp)
   104e8:	18bfec36 	bltu	r3,r2,1049c <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   104ec:	e0bffe17 	ldw	r2,-8(fp)
}
   104f0:	e037883a 	mov	sp,fp
   104f4:	df000017 	ldw	fp,0(sp)
   104f8:	dec00104 	addi	sp,sp,4
   104fc:	f800283a 	ret

00010500 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   10500:	defff804 	addi	sp,sp,-32
   10504:	dfc00715 	stw	ra,28(sp)
   10508:	df000615 	stw	fp,24(sp)
   1050c:	df000604 	addi	fp,sp,24
   10510:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   10514:	e0bffc17 	ldw	r2,-16(fp)
   10518:	1004803a 	cmplt	r2,r2,zero
   1051c:	1000091e 	bne	r2,zero,10544 <close+0x44>
   10520:	e13ffc17 	ldw	r4,-16(fp)
   10524:	01400304 	movi	r5,12
   10528:	00111640 	call	11164 <__mulsi3>
   1052c:	1007883a 	mov	r3,r2
   10530:	00800074 	movhi	r2,1
   10534:	10849e04 	addi	r2,r2,4728
   10538:	1887883a 	add	r3,r3,r2
   1053c:	e0ffff15 	stw	r3,-4(fp)
   10540:	00000106 	br	10548 <close+0x48>
   10544:	e03fff15 	stw	zero,-4(fp)
   10548:	e0bfff17 	ldw	r2,-4(fp)
   1054c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   10550:	e0bffb17 	ldw	r2,-20(fp)
   10554:	1005003a 	cmpeq	r2,r2,zero
   10558:	10001d1e 	bne	r2,zero,105d0 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1055c:	e0bffb17 	ldw	r2,-20(fp)
   10560:	10800017 	ldw	r2,0(r2)
   10564:	10800417 	ldw	r2,16(r2)
   10568:	1005003a 	cmpeq	r2,r2,zero
   1056c:	1000071e 	bne	r2,zero,1058c <close+0x8c>
   10570:	e0bffb17 	ldw	r2,-20(fp)
   10574:	10800017 	ldw	r2,0(r2)
   10578:	10800417 	ldw	r2,16(r2)
   1057c:	e13ffb17 	ldw	r4,-20(fp)
   10580:	103ee83a 	callr	r2
   10584:	e0bffe15 	stw	r2,-8(fp)
   10588:	00000106 	br	10590 <close+0x90>
   1058c:	e03ffe15 	stw	zero,-8(fp)
   10590:	e0bffe17 	ldw	r2,-8(fp)
   10594:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   10598:	e13ffc17 	ldw	r4,-16(fp)
   1059c:	0010c0c0 	call	10c0c <alt_release_fd>
    if (rval < 0)
   105a0:	e0bffa17 	ldw	r2,-24(fp)
   105a4:	1004403a 	cmpge	r2,r2,zero
   105a8:	1000071e 	bne	r2,zero,105c8 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   105ac:	00106000 	call	10600 <alt_get_errno>
   105b0:	e0fffa17 	ldw	r3,-24(fp)
   105b4:	00c7c83a 	sub	r3,zero,r3
   105b8:	10c00015 	stw	r3,0(r2)
      return -1;
   105bc:	00bfffc4 	movi	r2,-1
   105c0:	e0bffd15 	stw	r2,-12(fp)
   105c4:	00000806 	br	105e8 <close+0xe8>
    }
    return 0;
   105c8:	e03ffd15 	stw	zero,-12(fp)
   105cc:	00000606 	br	105e8 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   105d0:	00106000 	call	10600 <alt_get_errno>
   105d4:	1007883a 	mov	r3,r2
   105d8:	00801444 	movi	r2,81
   105dc:	18800015 	stw	r2,0(r3)
    return -1;
   105e0:	00bfffc4 	movi	r2,-1
   105e4:	e0bffd15 	stw	r2,-12(fp)
   105e8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   105ec:	e037883a 	mov	sp,fp
   105f0:	dfc00117 	ldw	ra,4(sp)
   105f4:	df000017 	ldw	fp,0(sp)
   105f8:	dec00204 	addi	sp,sp,8
   105fc:	f800283a 	ret

00010600 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10600:	defffd04 	addi	sp,sp,-12
   10604:	dfc00215 	stw	ra,8(sp)
   10608:	df000115 	stw	fp,4(sp)
   1060c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10610:	00800074 	movhi	r2,1
   10614:	10853b04 	addi	r2,r2,5356
   10618:	10800017 	ldw	r2,0(r2)
   1061c:	1005003a 	cmpeq	r2,r2,zero
   10620:	1000061e 	bne	r2,zero,1063c <alt_get_errno+0x3c>
   10624:	00800074 	movhi	r2,1
   10628:	10853b04 	addi	r2,r2,5356
   1062c:	10800017 	ldw	r2,0(r2)
   10630:	103ee83a 	callr	r2
   10634:	e0bfff15 	stw	r2,-4(fp)
   10638:	00000306 	br	10648 <alt_get_errno+0x48>
   1063c:	00800074 	movhi	r2,1
   10640:	1085f604 	addi	r2,r2,6104
   10644:	e0bfff15 	stw	r2,-4(fp)
   10648:	e0bfff17 	ldw	r2,-4(fp)
}
   1064c:	e037883a 	mov	sp,fp
   10650:	dfc00117 	ldw	ra,4(sp)
   10654:	df000017 	ldw	fp,0(sp)
   10658:	dec00204 	addi	sp,sp,8
   1065c:	f800283a 	ret

00010660 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10660:	deffff04 	addi	sp,sp,-4
   10664:	df000015 	stw	fp,0(sp)
   10668:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1066c:	e037883a 	mov	sp,fp
   10670:	df000017 	ldw	fp,0(sp)
   10674:	dec00104 	addi	sp,sp,4
   10678:	f800283a 	ret

0001067c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1067c:	defffc04 	addi	sp,sp,-16
   10680:	df000315 	stw	fp,12(sp)
   10684:	df000304 	addi	fp,sp,12
   10688:	e13ffd15 	stw	r4,-12(fp)
   1068c:	e17ffe15 	stw	r5,-8(fp)
   10690:	e1bfff15 	stw	r6,-4(fp)
  return len;
   10694:	e0bfff17 	ldw	r2,-4(fp)
}
   10698:	e037883a 	mov	sp,fp
   1069c:	df000017 	ldw	fp,0(sp)
   106a0:	dec00104 	addi	sp,sp,4
   106a4:	f800283a 	ret

000106a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   106a8:	defff904 	addi	sp,sp,-28
   106ac:	dfc00615 	stw	ra,24(sp)
   106b0:	df000515 	stw	fp,20(sp)
   106b4:	df000504 	addi	fp,sp,20
   106b8:	e13ffd15 	stw	r4,-12(fp)
   106bc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   106c0:	e0bffd17 	ldw	r2,-12(fp)
   106c4:	1005003a 	cmpeq	r2,r2,zero
   106c8:	1000041e 	bne	r2,zero,106dc <alt_dev_llist_insert+0x34>
   106cc:	e0bffd17 	ldw	r2,-12(fp)
   106d0:	10800217 	ldw	r2,8(r2)
   106d4:	1004c03a 	cmpne	r2,r2,zero
   106d8:	1000071e 	bne	r2,zero,106f8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   106dc:	001075c0 	call	1075c <alt_get_errno>
   106e0:	1007883a 	mov	r3,r2
   106e4:	00800584 	movi	r2,22
   106e8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   106ec:	00bffa84 	movi	r2,-22
   106f0:	e0bfff15 	stw	r2,-4(fp)
   106f4:	00001306 	br	10744 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   106f8:	e0fffd17 	ldw	r3,-12(fp)
   106fc:	e0bffe17 	ldw	r2,-8(fp)
   10700:	e0bffb15 	stw	r2,-20(fp)
   10704:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10708:	e0fffc17 	ldw	r3,-16(fp)
   1070c:	e0bffb17 	ldw	r2,-20(fp)
   10710:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   10714:	e0bffb17 	ldw	r2,-20(fp)
   10718:	10c00017 	ldw	r3,0(r2)
   1071c:	e0bffc17 	ldw	r2,-16(fp)
   10720:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10724:	e0bffb17 	ldw	r2,-20(fp)
   10728:	10c00017 	ldw	r3,0(r2)
   1072c:	e0bffc17 	ldw	r2,-16(fp)
   10730:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   10734:	e0fffb17 	ldw	r3,-20(fp)
   10738:	e0bffc17 	ldw	r2,-16(fp)
   1073c:	18800015 	stw	r2,0(r3)

  return 0;  
   10740:	e03fff15 	stw	zero,-4(fp)
   10744:	e0bfff17 	ldw	r2,-4(fp)
}
   10748:	e037883a 	mov	sp,fp
   1074c:	dfc00117 	ldw	ra,4(sp)
   10750:	df000017 	ldw	fp,0(sp)
   10754:	dec00204 	addi	sp,sp,8
   10758:	f800283a 	ret

0001075c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1075c:	defffd04 	addi	sp,sp,-12
   10760:	dfc00215 	stw	ra,8(sp)
   10764:	df000115 	stw	fp,4(sp)
   10768:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1076c:	00800074 	movhi	r2,1
   10770:	10853b04 	addi	r2,r2,5356
   10774:	10800017 	ldw	r2,0(r2)
   10778:	1005003a 	cmpeq	r2,r2,zero
   1077c:	1000061e 	bne	r2,zero,10798 <alt_get_errno+0x3c>
   10780:	00800074 	movhi	r2,1
   10784:	10853b04 	addi	r2,r2,5356
   10788:	10800017 	ldw	r2,0(r2)
   1078c:	103ee83a 	callr	r2
   10790:	e0bfff15 	stw	r2,-4(fp)
   10794:	00000306 	br	107a4 <alt_get_errno+0x48>
   10798:	00800074 	movhi	r2,1
   1079c:	1085f604 	addi	r2,r2,6104
   107a0:	e0bfff15 	stw	r2,-4(fp)
   107a4:	e0bfff17 	ldw	r2,-4(fp)
}
   107a8:	e037883a 	mov	sp,fp
   107ac:	dfc00117 	ldw	ra,4(sp)
   107b0:	df000017 	ldw	fp,0(sp)
   107b4:	dec00204 	addi	sp,sp,8
   107b8:	f800283a 	ret

000107bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   107bc:	deffff04 	addi	sp,sp,-4
   107c0:	df000015 	stw	fp,0(sp)
   107c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   107c8:	e037883a 	mov	sp,fp
   107cc:	df000017 	ldw	fp,0(sp)
   107d0:	dec00104 	addi	sp,sp,4
   107d4:	f800283a 	ret

000107d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   107d8:	defff804 	addi	sp,sp,-32
   107dc:	dfc00715 	stw	ra,28(sp)
   107e0:	df000615 	stw	fp,24(sp)
   107e4:	dc000515 	stw	r16,20(sp)
   107e8:	df000504 	addi	fp,sp,20
   107ec:	e13ffc15 	stw	r4,-16(fp)
   107f0:	e17ffd15 	stw	r5,-12(fp)
   107f4:	e1bffe15 	stw	r6,-8(fp)
   107f8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   107fc:	e13ffd17 	ldw	r4,-12(fp)
   10800:	e17ffe17 	ldw	r5,-8(fp)
   10804:	e1bfff17 	ldw	r6,-4(fp)
   10808:	0010a200 	call	10a20 <open>
   1080c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10810:	e0bffb17 	ldw	r2,-20(fp)
   10814:	1004803a 	cmplt	r2,r2,zero
   10818:	10001f1e 	bne	r2,zero,10898 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   1081c:	e13ffb17 	ldw	r4,-20(fp)
   10820:	04000074 	movhi	r16,1
   10824:	84049e04 	addi	r16,r16,4728
   10828:	01400304 	movi	r5,12
   1082c:	00111640 	call	11164 <__mulsi3>
   10830:	1405883a 	add	r2,r2,r16
   10834:	10c00017 	ldw	r3,0(r2)
   10838:	e0bffc17 	ldw	r2,-16(fp)
   1083c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10840:	e13ffb17 	ldw	r4,-20(fp)
   10844:	04000074 	movhi	r16,1
   10848:	84049e04 	addi	r16,r16,4728
   1084c:	01400304 	movi	r5,12
   10850:	00111640 	call	11164 <__mulsi3>
   10854:	1405883a 	add	r2,r2,r16
   10858:	10800104 	addi	r2,r2,4
   1085c:	10c00017 	ldw	r3,0(r2)
   10860:	e0bffc17 	ldw	r2,-16(fp)
   10864:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10868:	e13ffb17 	ldw	r4,-20(fp)
   1086c:	04000074 	movhi	r16,1
   10870:	84049e04 	addi	r16,r16,4728
   10874:	01400304 	movi	r5,12
   10878:	00111640 	call	11164 <__mulsi3>
   1087c:	1405883a 	add	r2,r2,r16
   10880:	10800204 	addi	r2,r2,8
   10884:	10c00017 	ldw	r3,0(r2)
   10888:	e0bffc17 	ldw	r2,-16(fp)
   1088c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10890:	e13ffb17 	ldw	r4,-20(fp)
   10894:	0010c0c0 	call	10c0c <alt_release_fd>
  }
} 
   10898:	e037883a 	mov	sp,fp
   1089c:	dfc00217 	ldw	ra,8(sp)
   108a0:	df000117 	ldw	fp,4(sp)
   108a4:	dc000017 	ldw	r16,0(sp)
   108a8:	dec00304 	addi	sp,sp,12
   108ac:	f800283a 	ret

000108b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   108b0:	defffb04 	addi	sp,sp,-20
   108b4:	dfc00415 	stw	ra,16(sp)
   108b8:	df000315 	stw	fp,12(sp)
   108bc:	df000304 	addi	fp,sp,12
   108c0:	e13ffd15 	stw	r4,-12(fp)
   108c4:	e17ffe15 	stw	r5,-8(fp)
   108c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   108cc:	01000074 	movhi	r4,1
   108d0:	2104a104 	addi	r4,r4,4740
   108d4:	e17ffd17 	ldw	r5,-12(fp)
   108d8:	01800044 	movi	r6,1
   108dc:	01c07fc4 	movi	r7,511
   108e0:	00107d80 	call	107d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   108e4:	01000074 	movhi	r4,1
   108e8:	21049e04 	addi	r4,r4,4728
   108ec:	e17ffe17 	ldw	r5,-8(fp)
   108f0:	000d883a 	mov	r6,zero
   108f4:	01c07fc4 	movi	r7,511
   108f8:	00107d80 	call	107d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   108fc:	01000074 	movhi	r4,1
   10900:	2104a404 	addi	r4,r4,4752
   10904:	e17fff17 	ldw	r5,-4(fp)
   10908:	01800044 	movi	r6,1
   1090c:	01c07fc4 	movi	r7,511
   10910:	00107d80 	call	107d8 <alt_open_fd>
}  
   10914:	e037883a 	mov	sp,fp
   10918:	dfc00117 	ldw	ra,4(sp)
   1091c:	df000017 	ldw	fp,0(sp)
   10920:	dec00204 	addi	sp,sp,8
   10924:	f800283a 	ret

00010928 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10928:	defffa04 	addi	sp,sp,-24
   1092c:	dfc00515 	stw	ra,20(sp)
   10930:	df000415 	stw	fp,16(sp)
   10934:	dc000315 	stw	r16,12(sp)
   10938:	df000304 	addi	fp,sp,12
   1093c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10940:	e0bffe17 	ldw	r2,-8(fp)
   10944:	10800217 	ldw	r2,8(r2)
   10948:	10d00034 	orhi	r3,r2,16384
   1094c:	e0bffe17 	ldw	r2,-8(fp)
   10950:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10954:	e03ffd15 	stw	zero,-12(fp)
   10958:	00002306 	br	109e8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1095c:	e13ffd17 	ldw	r4,-12(fp)
   10960:	04000074 	movhi	r16,1
   10964:	84049e04 	addi	r16,r16,4728
   10968:	01400304 	movi	r5,12
   1096c:	00111640 	call	11164 <__mulsi3>
   10970:	1405883a 	add	r2,r2,r16
   10974:	10c00017 	ldw	r3,0(r2)
   10978:	e0bffe17 	ldw	r2,-8(fp)
   1097c:	10800017 	ldw	r2,0(r2)
   10980:	1880161e 	bne	r3,r2,109dc <alt_file_locked+0xb4>
   10984:	e13ffd17 	ldw	r4,-12(fp)
   10988:	04000074 	movhi	r16,1
   1098c:	84049e04 	addi	r16,r16,4728
   10990:	01400304 	movi	r5,12
   10994:	00111640 	call	11164 <__mulsi3>
   10998:	1405883a 	add	r2,r2,r16
   1099c:	10800204 	addi	r2,r2,8
   109a0:	10800017 	ldw	r2,0(r2)
   109a4:	1004403a 	cmpge	r2,r2,zero
   109a8:	10000c1e 	bne	r2,zero,109dc <alt_file_locked+0xb4>
   109ac:	e13ffd17 	ldw	r4,-12(fp)
   109b0:	01400304 	movi	r5,12
   109b4:	00111640 	call	11164 <__mulsi3>
   109b8:	1007883a 	mov	r3,r2
   109bc:	00800074 	movhi	r2,1
   109c0:	10849e04 	addi	r2,r2,4728
   109c4:	1887883a 	add	r3,r3,r2
   109c8:	e0bffe17 	ldw	r2,-8(fp)
   109cc:	18800326 	beq	r3,r2,109dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   109d0:	00bffcc4 	movi	r2,-13
   109d4:	e0bfff15 	stw	r2,-4(fp)
   109d8:	00000a06 	br	10a04 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   109dc:	e0bffd17 	ldw	r2,-12(fp)
   109e0:	10800044 	addi	r2,r2,1
   109e4:	e0bffd15 	stw	r2,-12(fp)
   109e8:	00800074 	movhi	r2,1
   109ec:	10853a04 	addi	r2,r2,5352
   109f0:	10800017 	ldw	r2,0(r2)
   109f4:	1007883a 	mov	r3,r2
   109f8:	e0bffd17 	ldw	r2,-12(fp)
   109fc:	18bfd72e 	bgeu	r3,r2,1095c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10a00:	e03fff15 	stw	zero,-4(fp)
   10a04:	e0bfff17 	ldw	r2,-4(fp)
}
   10a08:	e037883a 	mov	sp,fp
   10a0c:	dfc00217 	ldw	ra,8(sp)
   10a10:	df000117 	ldw	fp,4(sp)
   10a14:	dc000017 	ldw	r16,0(sp)
   10a18:	dec00304 	addi	sp,sp,12
   10a1c:	f800283a 	ret

00010a20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10a20:	defff404 	addi	sp,sp,-48
   10a24:	dfc00b15 	stw	ra,44(sp)
   10a28:	df000a15 	stw	fp,40(sp)
   10a2c:	df000a04 	addi	fp,sp,40
   10a30:	e13ffb15 	stw	r4,-20(fp)
   10a34:	e17ffc15 	stw	r5,-16(fp)
   10a38:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10a3c:	00bfffc4 	movi	r2,-1
   10a40:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   10a44:	00bffb44 	movi	r2,-19
   10a48:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   10a4c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10a50:	e13ffb17 	ldw	r4,-20(fp)
   10a54:	01400074 	movhi	r5,1
   10a58:	29453804 	addi	r5,r5,5344
   10a5c:	0010ca40 	call	10ca4 <alt_find_dev>
   10a60:	e0bffa15 	stw	r2,-24(fp)
   10a64:	e0bffa17 	ldw	r2,-24(fp)
   10a68:	1004c03a 	cmpne	r2,r2,zero
   10a6c:	1000051e 	bne	r2,zero,10a84 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10a70:	e13ffb17 	ldw	r4,-20(fp)
   10a74:	0010d380 	call	10d38 <alt_find_file>
   10a78:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   10a7c:	00800044 	movi	r2,1
   10a80:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10a84:	e0bffa17 	ldw	r2,-24(fp)
   10a88:	1005003a 	cmpeq	r2,r2,zero
   10a8c:	1000311e 	bne	r2,zero,10b54 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10a90:	e13ffa17 	ldw	r4,-24(fp)
   10a94:	0010e580 	call	10e58 <alt_get_fd>
   10a98:	e0bff815 	stw	r2,-32(fp)
   10a9c:	e0bff817 	ldw	r2,-32(fp)
   10aa0:	1004403a 	cmpge	r2,r2,zero
   10aa4:	1000031e 	bne	r2,zero,10ab4 <open+0x94>
    {
      status = index;
   10aa8:	e0bff817 	ldw	r2,-32(fp)
   10aac:	e0bff715 	stw	r2,-36(fp)
   10ab0:	00002a06 	br	10b5c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   10ab4:	e13ff817 	ldw	r4,-32(fp)
   10ab8:	01400304 	movi	r5,12
   10abc:	00111640 	call	11164 <__mulsi3>
   10ac0:	1007883a 	mov	r3,r2
   10ac4:	00800074 	movhi	r2,1
   10ac8:	10849e04 	addi	r2,r2,4728
   10acc:	1885883a 	add	r2,r3,r2
   10ad0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10ad4:	e0fffc17 	ldw	r3,-16(fp)
   10ad8:	00900034 	movhi	r2,16384
   10adc:	10bfffc4 	addi	r2,r2,-1
   10ae0:	1886703a 	and	r3,r3,r2
   10ae4:	e0bff917 	ldw	r2,-28(fp)
   10ae8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10aec:	e0bff617 	ldw	r2,-40(fp)
   10af0:	1004c03a 	cmpne	r2,r2,zero
   10af4:	1000061e 	bne	r2,zero,10b10 <open+0xf0>
   10af8:	e13ff917 	ldw	r4,-28(fp)
   10afc:	00109280 	call	10928 <alt_file_locked>
   10b00:	e0bff715 	stw	r2,-36(fp)
   10b04:	e0bff717 	ldw	r2,-36(fp)
   10b08:	1004803a 	cmplt	r2,r2,zero
   10b0c:	1000131e 	bne	r2,zero,10b5c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10b10:	e0bffa17 	ldw	r2,-24(fp)
   10b14:	10800317 	ldw	r2,12(r2)
   10b18:	1005003a 	cmpeq	r2,r2,zero
   10b1c:	1000091e 	bne	r2,zero,10b44 <open+0x124>
   10b20:	e0bffa17 	ldw	r2,-24(fp)
   10b24:	10800317 	ldw	r2,12(r2)
   10b28:	e13ff917 	ldw	r4,-28(fp)
   10b2c:	e17ffb17 	ldw	r5,-20(fp)
   10b30:	e1bffc17 	ldw	r6,-16(fp)
   10b34:	e1fffd17 	ldw	r7,-12(fp)
   10b38:	103ee83a 	callr	r2
   10b3c:	e0bfff15 	stw	r2,-4(fp)
   10b40:	00000106 	br	10b48 <open+0x128>
   10b44:	e03fff15 	stw	zero,-4(fp)
   10b48:	e0bfff17 	ldw	r2,-4(fp)
   10b4c:	e0bff715 	stw	r2,-36(fp)
   10b50:	00000206 	br	10b5c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10b54:	00bffb44 	movi	r2,-19
   10b58:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10b5c:	e0bff717 	ldw	r2,-36(fp)
   10b60:	1004403a 	cmpge	r2,r2,zero
   10b64:	1000091e 	bne	r2,zero,10b8c <open+0x16c>
  {
    alt_release_fd (index);  
   10b68:	e13ff817 	ldw	r4,-32(fp)
   10b6c:	0010c0c0 	call	10c0c <alt_release_fd>
    ALT_ERRNO = -status;
   10b70:	0010bac0 	call	10bac <alt_get_errno>
   10b74:	e0fff717 	ldw	r3,-36(fp)
   10b78:	00c7c83a 	sub	r3,zero,r3
   10b7c:	10c00015 	stw	r3,0(r2)
    return -1;
   10b80:	00bfffc4 	movi	r2,-1
   10b84:	e0bffe15 	stw	r2,-8(fp)
   10b88:	00000206 	br	10b94 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   10b8c:	e0bff817 	ldw	r2,-32(fp)
   10b90:	e0bffe15 	stw	r2,-8(fp)
   10b94:	e0bffe17 	ldw	r2,-8(fp)
}
   10b98:	e037883a 	mov	sp,fp
   10b9c:	dfc00117 	ldw	ra,4(sp)
   10ba0:	df000017 	ldw	fp,0(sp)
   10ba4:	dec00204 	addi	sp,sp,8
   10ba8:	f800283a 	ret

00010bac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10bac:	defffd04 	addi	sp,sp,-12
   10bb0:	dfc00215 	stw	ra,8(sp)
   10bb4:	df000115 	stw	fp,4(sp)
   10bb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10bbc:	00800074 	movhi	r2,1
   10bc0:	10853b04 	addi	r2,r2,5356
   10bc4:	10800017 	ldw	r2,0(r2)
   10bc8:	1005003a 	cmpeq	r2,r2,zero
   10bcc:	1000061e 	bne	r2,zero,10be8 <alt_get_errno+0x3c>
   10bd0:	00800074 	movhi	r2,1
   10bd4:	10853b04 	addi	r2,r2,5356
   10bd8:	10800017 	ldw	r2,0(r2)
   10bdc:	103ee83a 	callr	r2
   10be0:	e0bfff15 	stw	r2,-4(fp)
   10be4:	00000306 	br	10bf4 <alt_get_errno+0x48>
   10be8:	00800074 	movhi	r2,1
   10bec:	1085f604 	addi	r2,r2,6104
   10bf0:	e0bfff15 	stw	r2,-4(fp)
   10bf4:	e0bfff17 	ldw	r2,-4(fp)
}
   10bf8:	e037883a 	mov	sp,fp
   10bfc:	dfc00117 	ldw	ra,4(sp)
   10c00:	df000017 	ldw	fp,0(sp)
   10c04:	dec00204 	addi	sp,sp,8
   10c08:	f800283a 	ret

00010c0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   10c0c:	defffc04 	addi	sp,sp,-16
   10c10:	dfc00315 	stw	ra,12(sp)
   10c14:	df000215 	stw	fp,8(sp)
   10c18:	dc000115 	stw	r16,4(sp)
   10c1c:	df000104 	addi	fp,sp,4
   10c20:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   10c24:	e0bfff17 	ldw	r2,-4(fp)
   10c28:	108000d0 	cmplti	r2,r2,3
   10c2c:	10000f1e 	bne	r2,zero,10c6c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   10c30:	e13fff17 	ldw	r4,-4(fp)
   10c34:	04000074 	movhi	r16,1
   10c38:	84049e04 	addi	r16,r16,4728
   10c3c:	01400304 	movi	r5,12
   10c40:	00111640 	call	11164 <__mulsi3>
   10c44:	1405883a 	add	r2,r2,r16
   10c48:	10800204 	addi	r2,r2,8
   10c4c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   10c50:	e13fff17 	ldw	r4,-4(fp)
   10c54:	04000074 	movhi	r16,1
   10c58:	84049e04 	addi	r16,r16,4728
   10c5c:	01400304 	movi	r5,12
   10c60:	00111640 	call	11164 <__mulsi3>
   10c64:	1405883a 	add	r2,r2,r16
   10c68:	10000015 	stw	zero,0(r2)
  }
}
   10c6c:	e037883a 	mov	sp,fp
   10c70:	dfc00217 	ldw	ra,8(sp)
   10c74:	df000117 	ldw	fp,4(sp)
   10c78:	dc000017 	ldw	r16,0(sp)
   10c7c:	dec00304 	addi	sp,sp,12
   10c80:	f800283a 	ret

00010c84 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   10c84:	deffff04 	addi	sp,sp,-4
   10c88:	df000015 	stw	fp,0(sp)
   10c8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10c90:	000170fa 	wrctl	ienable,zero
}
   10c94:	e037883a 	mov	sp,fp
   10c98:	df000017 	ldw	fp,0(sp)
   10c9c:	dec00104 	addi	sp,sp,4
   10ca0:	f800283a 	ret

00010ca4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10ca4:	defff904 	addi	sp,sp,-28
   10ca8:	dfc00615 	stw	ra,24(sp)
   10cac:	df000515 	stw	fp,20(sp)
   10cb0:	df000504 	addi	fp,sp,20
   10cb4:	e13ffd15 	stw	r4,-12(fp)
   10cb8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10cbc:	e0bffe17 	ldw	r2,-8(fp)
   10cc0:	10800017 	ldw	r2,0(r2)
   10cc4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10cc8:	e13ffd17 	ldw	r4,-12(fp)
   10ccc:	0010f840 	call	10f84 <strlen>
   10cd0:	10800044 	addi	r2,r2,1
   10cd4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10cd8:	00000d06 	br	10d10 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10cdc:	e0bffc17 	ldw	r2,-16(fp)
   10ce0:	11000217 	ldw	r4,8(r2)
   10ce4:	e1bffb17 	ldw	r6,-20(fp)
   10ce8:	e17ffd17 	ldw	r5,-12(fp)
   10cec:	0010f480 	call	10f48 <memcmp>
   10cf0:	1004c03a 	cmpne	r2,r2,zero
   10cf4:	1000031e 	bne	r2,zero,10d04 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10cf8:	e0bffc17 	ldw	r2,-16(fp)
   10cfc:	e0bfff15 	stw	r2,-4(fp)
   10d00:	00000706 	br	10d20 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10d04:	e0bffc17 	ldw	r2,-16(fp)
   10d08:	10800017 	ldw	r2,0(r2)
   10d0c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10d10:	e0fffe17 	ldw	r3,-8(fp)
   10d14:	e0bffc17 	ldw	r2,-16(fp)
   10d18:	10fff01e 	bne	r2,r3,10cdc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10d1c:	e03fff15 	stw	zero,-4(fp)
   10d20:	e0bfff17 	ldw	r2,-4(fp)
}
   10d24:	e037883a 	mov	sp,fp
   10d28:	dfc00117 	ldw	ra,4(sp)
   10d2c:	df000017 	ldw	fp,0(sp)
   10d30:	dec00204 	addi	sp,sp,8
   10d34:	f800283a 	ret

00010d38 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10d38:	defffa04 	addi	sp,sp,-24
   10d3c:	dfc00515 	stw	ra,20(sp)
   10d40:	df000415 	stw	fp,16(sp)
   10d44:	df000404 	addi	fp,sp,16
   10d48:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10d4c:	00800074 	movhi	r2,1
   10d50:	10853604 	addi	r2,r2,5336
   10d54:	10800017 	ldw	r2,0(r2)
   10d58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10d5c:	00003306 	br	10e2c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   10d60:	e0bffd17 	ldw	r2,-12(fp)
   10d64:	11000217 	ldw	r4,8(r2)
   10d68:	0010f840 	call	10f84 <strlen>
   10d6c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   10d70:	e0bffd17 	ldw	r2,-12(fp)
   10d74:	10c00217 	ldw	r3,8(r2)
   10d78:	e0bffc17 	ldw	r2,-16(fp)
   10d7c:	1885883a 	add	r2,r3,r2
   10d80:	10bfffc4 	addi	r2,r2,-1
   10d84:	10800003 	ldbu	r2,0(r2)
   10d88:	10803fcc 	andi	r2,r2,255
   10d8c:	1080201c 	xori	r2,r2,128
   10d90:	10bfe004 	addi	r2,r2,-128
   10d94:	10800bd8 	cmpnei	r2,r2,47
   10d98:	1000031e 	bne	r2,zero,10da8 <alt_find_file+0x70>
    {
      len -= 1;
   10d9c:	e0bffc17 	ldw	r2,-16(fp)
   10da0:	10bfffc4 	addi	r2,r2,-1
   10da4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10da8:	e0bffc17 	ldw	r2,-16(fp)
   10dac:	1007883a 	mov	r3,r2
   10db0:	e0bffe17 	ldw	r2,-8(fp)
   10db4:	1885883a 	add	r2,r3,r2
   10db8:	10800003 	ldbu	r2,0(r2)
   10dbc:	10803fcc 	andi	r2,r2,255
   10dc0:	1080201c 	xori	r2,r2,128
   10dc4:	10bfe004 	addi	r2,r2,-128
   10dc8:	10800be0 	cmpeqi	r2,r2,47
   10dcc:	10000a1e 	bne	r2,zero,10df8 <alt_find_file+0xc0>
   10dd0:	e0bffc17 	ldw	r2,-16(fp)
   10dd4:	1007883a 	mov	r3,r2
   10dd8:	e0bffe17 	ldw	r2,-8(fp)
   10ddc:	1885883a 	add	r2,r3,r2
   10de0:	10800003 	ldbu	r2,0(r2)
   10de4:	10803fcc 	andi	r2,r2,255
   10de8:	1080201c 	xori	r2,r2,128
   10dec:	10bfe004 	addi	r2,r2,-128
   10df0:	1004c03a 	cmpne	r2,r2,zero
   10df4:	10000a1e 	bne	r2,zero,10e20 <alt_find_file+0xe8>
   10df8:	e0bffd17 	ldw	r2,-12(fp)
   10dfc:	11000217 	ldw	r4,8(r2)
   10e00:	e1bffc17 	ldw	r6,-16(fp)
   10e04:	e17ffe17 	ldw	r5,-8(fp)
   10e08:	0010f480 	call	10f48 <memcmp>
   10e0c:	1004c03a 	cmpne	r2,r2,zero
   10e10:	1000031e 	bne	r2,zero,10e20 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10e14:	e0bffd17 	ldw	r2,-12(fp)
   10e18:	e0bfff15 	stw	r2,-4(fp)
   10e1c:	00000806 	br	10e40 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   10e20:	e0bffd17 	ldw	r2,-12(fp)
   10e24:	10800017 	ldw	r2,0(r2)
   10e28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10e2c:	00c00074 	movhi	r3,1
   10e30:	18c53604 	addi	r3,r3,5336
   10e34:	e0bffd17 	ldw	r2,-12(fp)
   10e38:	10ffc91e 	bne	r2,r3,10d60 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10e3c:	e03fff15 	stw	zero,-4(fp)
   10e40:	e0bfff17 	ldw	r2,-4(fp)
}
   10e44:	e037883a 	mov	sp,fp
   10e48:	dfc00117 	ldw	ra,4(sp)
   10e4c:	df000017 	ldw	fp,0(sp)
   10e50:	dec00204 	addi	sp,sp,8
   10e54:	f800283a 	ret

00010e58 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10e58:	defffa04 	addi	sp,sp,-24
   10e5c:	dfc00515 	stw	ra,20(sp)
   10e60:	df000415 	stw	fp,16(sp)
   10e64:	dc000315 	stw	r16,12(sp)
   10e68:	df000304 	addi	fp,sp,12
   10e6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10e70:	00bffa04 	movi	r2,-24
   10e74:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10e78:	e03ffe15 	stw	zero,-8(fp)
   10e7c:	00002006 	br	10f00 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   10e80:	e13ffe17 	ldw	r4,-8(fp)
   10e84:	04000074 	movhi	r16,1
   10e88:	84049e04 	addi	r16,r16,4728
   10e8c:	01400304 	movi	r5,12
   10e90:	00111640 	call	11164 <__mulsi3>
   10e94:	1405883a 	add	r2,r2,r16
   10e98:	10800017 	ldw	r2,0(r2)
   10e9c:	1004c03a 	cmpne	r2,r2,zero
   10ea0:	1000141e 	bne	r2,zero,10ef4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   10ea4:	e13ffe17 	ldw	r4,-8(fp)
   10ea8:	04000074 	movhi	r16,1
   10eac:	84049e04 	addi	r16,r16,4728
   10eb0:	01400304 	movi	r5,12
   10eb4:	00111640 	call	11164 <__mulsi3>
   10eb8:	1407883a 	add	r3,r2,r16
   10ebc:	e0bfff17 	ldw	r2,-4(fp)
   10ec0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   10ec4:	00800074 	movhi	r2,1
   10ec8:	10853a04 	addi	r2,r2,5352
   10ecc:	10c00017 	ldw	r3,0(r2)
   10ed0:	e0bffe17 	ldw	r2,-8(fp)
   10ed4:	1880040e 	bge	r3,r2,10ee8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   10ed8:	00c00074 	movhi	r3,1
   10edc:	18c53a04 	addi	r3,r3,5352
   10ee0:	e0bffe17 	ldw	r2,-8(fp)
   10ee4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   10ee8:	e0bffe17 	ldw	r2,-8(fp)
   10eec:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   10ef0:	00000606 	br	10f0c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10ef4:	e0bffe17 	ldw	r2,-8(fp)
   10ef8:	10800044 	addi	r2,r2,1
   10efc:	e0bffe15 	stw	r2,-8(fp)
   10f00:	e0bffe17 	ldw	r2,-8(fp)
   10f04:	10800810 	cmplti	r2,r2,32
   10f08:	103fdd1e 	bne	r2,zero,10e80 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10f0c:	e0bffd17 	ldw	r2,-12(fp)
}
   10f10:	e037883a 	mov	sp,fp
   10f14:	dfc00217 	ldw	ra,8(sp)
   10f18:	df000117 	ldw	fp,4(sp)
   10f1c:	dc000017 	ldw	r16,0(sp)
   10f20:	dec00304 	addi	sp,sp,12
   10f24:	f800283a 	ret

00010f28 <exit>:
   10f28:	defffe04 	addi	sp,sp,-8
   10f2c:	dc400015 	stw	r17,0(sp)
   10f30:	000b883a 	mov	r5,zero
   10f34:	2023883a 	mov	r17,r4
   10f38:	dfc00115 	stw	ra,4(sp)
   10f3c:	0010fa80 	call	10fa8 <__call_exitprocs>
   10f40:	8809883a 	mov	r4,r17
   10f44:	00111dc0 	call	111dc <_exit>

00010f48 <memcmp>:
   10f48:	31ffffc4 	addi	r7,r6,-1
   10f4c:	3000061e 	bne	r6,zero,10f68 <memcmp+0x20>
   10f50:	00000a06 	br	10f7c <memcmp+0x34>
   10f54:	39ffffc4 	addi	r7,r7,-1
   10f58:	00bfffc4 	movi	r2,-1
   10f5c:	21000044 	addi	r4,r4,1
   10f60:	29400044 	addi	r5,r5,1
   10f64:	38800526 	beq	r7,r2,10f7c <memcmp+0x34>
   10f68:	20c00003 	ldbu	r3,0(r4)
   10f6c:	28800003 	ldbu	r2,0(r5)
   10f70:	18bff826 	beq	r3,r2,10f54 <memcmp+0xc>
   10f74:	1885c83a 	sub	r2,r3,r2
   10f78:	f800283a 	ret
   10f7c:	0005883a 	mov	r2,zero
   10f80:	f800283a 	ret

00010f84 <strlen>:
   10f84:	20800007 	ldb	r2,0(r4)
   10f88:	10000526 	beq	r2,zero,10fa0 <strlen+0x1c>
   10f8c:	2007883a 	mov	r3,r4
   10f90:	18c00044 	addi	r3,r3,1
   10f94:	18800007 	ldb	r2,0(r3)
   10f98:	103ffd1e 	bne	r2,zero,10f90 <strlen+0xc>
   10f9c:	1905c83a 	sub	r2,r3,r4
   10fa0:	f800283a 	ret

00010fa4 <register_fini>:
   10fa4:	f800283a 	ret

00010fa8 <__call_exitprocs>:
   10fa8:	defff304 	addi	sp,sp,-52
   10fac:	00800074 	movhi	r2,1
   10fb0:	10853d04 	addi	r2,r2,5364
   10fb4:	df000b15 	stw	fp,44(sp)
   10fb8:	17000017 	ldw	fp,0(r2)
   10fbc:	00800034 	movhi	r2,0
   10fc0:	10800004 	addi	r2,r2,0
   10fc4:	1005003a 	cmpeq	r2,r2,zero
   10fc8:	d8800215 	stw	r2,8(sp)
   10fcc:	e0800c04 	addi	r2,fp,48
   10fd0:	dd800915 	stw	r22,36(sp)
   10fd4:	dd400815 	stw	r21,32(sp)
   10fd8:	dfc00c15 	stw	ra,48(sp)
   10fdc:	ddc00a15 	stw	r23,40(sp)
   10fe0:	dd000715 	stw	r20,28(sp)
   10fe4:	dcc00615 	stw	r19,24(sp)
   10fe8:	dc800515 	stw	r18,20(sp)
   10fec:	dc400415 	stw	r17,16(sp)
   10ff0:	dc000315 	stw	r16,12(sp)
   10ff4:	282d883a 	mov	r22,r5
   10ff8:	d9000115 	stw	r4,4(sp)
   10ffc:	d8800015 	stw	r2,0(sp)
   11000:	282b003a 	cmpeq	r21,r5,zero
   11004:	e4400c17 	ldw	r17,48(fp)
   11008:	88001226 	beq	r17,zero,11054 <__call_exitprocs+0xac>
   1100c:	ddc00017 	ldw	r23,0(sp)
   11010:	88800117 	ldw	r2,4(r17)
   11014:	8c802217 	ldw	r18,136(r17)
   11018:	143fffc4 	addi	r16,r2,-1
   1101c:	80000b16 	blt	r16,zero,1104c <__call_exitprocs+0xa4>
   11020:	9027003a 	cmpeq	r19,r18,zero
   11024:	a800171e 	bne	r21,zero,11084 <__call_exitprocs+0xdc>
   11028:	9800051e 	bne	r19,zero,11040 <__call_exitprocs+0x98>
   1102c:	8409883a 	add	r4,r16,r16
   11030:	2105883a 	add	r2,r4,r4
   11034:	1485883a 	add	r2,r2,r18
   11038:	10c02017 	ldw	r3,128(r2)
   1103c:	b0c01226 	beq	r22,r3,11088 <__call_exitprocs+0xe0>
   11040:	843fffc4 	addi	r16,r16,-1
   11044:	00bfffc4 	movi	r2,-1
   11048:	80bff61e 	bne	r16,r2,11024 <__call_exitprocs+0x7c>
   1104c:	d8800217 	ldw	r2,8(sp)
   11050:	10003226 	beq	r2,zero,1111c <__call_exitprocs+0x174>
   11054:	dfc00c17 	ldw	ra,48(sp)
   11058:	df000b17 	ldw	fp,44(sp)
   1105c:	ddc00a17 	ldw	r23,40(sp)
   11060:	dd800917 	ldw	r22,36(sp)
   11064:	dd400817 	ldw	r21,32(sp)
   11068:	dd000717 	ldw	r20,28(sp)
   1106c:	dcc00617 	ldw	r19,24(sp)
   11070:	dc800517 	ldw	r18,20(sp)
   11074:	dc400417 	ldw	r17,16(sp)
   11078:	dc000317 	ldw	r16,12(sp)
   1107c:	dec00d04 	addi	sp,sp,52
   11080:	f800283a 	ret
   11084:	8409883a 	add	r4,r16,r16
   11088:	88c00117 	ldw	r3,4(r17)
   1108c:	2105883a 	add	r2,r4,r4
   11090:	1445883a 	add	r2,r2,r17
   11094:	18ffffc4 	addi	r3,r3,-1
   11098:	11800217 	ldw	r6,8(r2)
   1109c:	1c001826 	beq	r3,r16,11100 <__call_exitprocs+0x158>
   110a0:	10000215 	stw	zero,8(r2)
   110a4:	303fe626 	beq	r6,zero,11040 <__call_exitprocs+0x98>
   110a8:	8d000117 	ldw	r20,4(r17)
   110ac:	9800121e 	bne	r19,zero,110f8 <__call_exitprocs+0x150>
   110b0:	00c00044 	movi	r3,1
   110b4:	1c06983a 	sll	r3,r3,r16
   110b8:	90804017 	ldw	r2,256(r18)
   110bc:	1884703a 	and	r2,r3,r2
   110c0:	10000d26 	beq	r2,zero,110f8 <__call_exitprocs+0x150>
   110c4:	90804117 	ldw	r2,260(r18)
   110c8:	1884703a 	and	r2,r3,r2
   110cc:	10000e1e 	bne	r2,zero,11108 <__call_exitprocs+0x160>
   110d0:	2105883a 	add	r2,r4,r4
   110d4:	1485883a 	add	r2,r2,r18
   110d8:	11400017 	ldw	r5,0(r2)
   110dc:	d9000117 	ldw	r4,4(sp)
   110e0:	303ee83a 	callr	r6
   110e4:	88800117 	ldw	r2,4(r17)
   110e8:	a0bfc61e 	bne	r20,r2,11004 <__call_exitprocs+0x5c>
   110ec:	b8800017 	ldw	r2,0(r23)
   110f0:	147fd326 	beq	r2,r17,11040 <__call_exitprocs+0x98>
   110f4:	003fc306 	br	11004 <__call_exitprocs+0x5c>
   110f8:	303ee83a 	callr	r6
   110fc:	003ff906 	br	110e4 <__call_exitprocs+0x13c>
   11100:	8c000115 	stw	r16,4(r17)
   11104:	003fe706 	br	110a4 <__call_exitprocs+0xfc>
   11108:	2105883a 	add	r2,r4,r4
   1110c:	1485883a 	add	r2,r2,r18
   11110:	11000017 	ldw	r4,0(r2)
   11114:	303ee83a 	callr	r6
   11118:	003ff206 	br	110e4 <__call_exitprocs+0x13c>
   1111c:	88800117 	ldw	r2,4(r17)
   11120:	10000b1e 	bne	r2,zero,11150 <__call_exitprocs+0x1a8>
   11124:	89000017 	ldw	r4,0(r17)
   11128:	20000a26 	beq	r4,zero,11154 <__call_exitprocs+0x1ac>
   1112c:	b9000015 	stw	r4,0(r23)
   11130:	90000226 	beq	r18,zero,1113c <__call_exitprocs+0x194>
   11134:	9009883a 	mov	r4,r18
   11138:	00000000 	call	0 <__alt_mem_RAM-0x10000>
   1113c:	8809883a 	mov	r4,r17
   11140:	00000000 	call	0 <__alt_mem_RAM-0x10000>
   11144:	bc400017 	ldw	r17,0(r23)
   11148:	883fb11e 	bne	r17,zero,11010 <__call_exitprocs+0x68>
   1114c:	003fc106 	br	11054 <__call_exitprocs+0xac>
   11150:	89000017 	ldw	r4,0(r17)
   11154:	882f883a 	mov	r23,r17
   11158:	2023883a 	mov	r17,r4
   1115c:	883fac1e 	bne	r17,zero,11010 <__call_exitprocs+0x68>
   11160:	003fbc06 	br	11054 <__call_exitprocs+0xac>

00011164 <__mulsi3>:
   11164:	20000a26 	beq	r4,zero,11190 <__mulsi3+0x2c>
   11168:	0007883a 	mov	r3,zero
   1116c:	2080004c 	andi	r2,r4,1
   11170:	1005003a 	cmpeq	r2,r2,zero
   11174:	2008d07a 	srli	r4,r4,1
   11178:	1000011e 	bne	r2,zero,11180 <__mulsi3+0x1c>
   1117c:	1947883a 	add	r3,r3,r5
   11180:	294b883a 	add	r5,r5,r5
   11184:	203ff91e 	bne	r4,zero,1116c <__mulsi3+0x8>
   11188:	1805883a 	mov	r2,r3
   1118c:	f800283a 	ret
   11190:	0007883a 	mov	r3,zero
   11194:	1805883a 	mov	r2,r3
   11198:	f800283a 	ret

0001119c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   1119c:	defffd04 	addi	sp,sp,-12
   111a0:	df000215 	stw	fp,8(sp)
   111a4:	df000204 	addi	fp,sp,8
   111a8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   111ac:	e0bfff17 	ldw	r2,-4(fp)
   111b0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   111b4:	e0bffe17 	ldw	r2,-8(fp)
   111b8:	1005003a 	cmpeq	r2,r2,zero
   111bc:	1000021e 	bne	r2,zero,111c8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   111c0:	002af070 	cmpltui	zero,zero,43969
   111c4:	00000106 	br	111cc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   111c8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   111cc:	e037883a 	mov	sp,fp
   111d0:	df000017 	ldw	fp,0(sp)
   111d4:	dec00104 	addi	sp,sp,4
   111d8:	f800283a 	ret

000111dc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   111dc:	defffd04 	addi	sp,sp,-12
   111e0:	dfc00215 	stw	ra,8(sp)
   111e4:	df000115 	stw	fp,4(sp)
   111e8:	df000104 	addi	fp,sp,4
   111ec:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   111f0:	e13fff17 	ldw	r4,-4(fp)
   111f4:	001119c0 	call	1119c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   111f8:	003fff06 	br	111f8 <_exit+0x1c>
   111fc:	00010fa4 	muli	zero,zero,1086
